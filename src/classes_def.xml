<lcgdict>
 <class name="edm::EventProvenance"/>
 <class name="std::vector<edm::BranchEntryDescription>"/> 
 <class name="edm::EDProduct"/>
 <class name="edm::ProductID"/>
 <class name="edm::EventID"/>
 <class name="edm::Timestamp"/>
 <class name="edm::EDProductGetter"/>
 <class name="edm::RefCore">
   <field name="prodGetter_" transient="true"/>
   <field name="prodPtr_" transient="true"/>
 </class>
 <class name="edm::RefItem<unsigned int>">
   <field name="ptr_" transient="true"/>
 </class>
 <class name="edm::RefItem<int>">
   <field name="ptr_" transient="true"/>
 </class>
 <class name="edm::RefItem<std::pair<unsigned int,unsigned int> >">
   <field name="ptr_" transient="true"/>
 </class>
 <class name="edm::RefBase<unsigned int>"/>
 <class name="edm::RefBase<int>"/>
 <class name="edm::RefBase<std::pair<unsigned int,unsigned int> >" />
 <class name="edm::RefVectorBase<unsigned int>"/>
 <class name="edm::RefVectorBase<int>"/>
 <class name="std::vector<edm::RefItem<unsigned int> >"/>
 <class name="std::basic_string<char>"/>
 <class name="std::vector<std::basic_string<char> >"/>
 <class name="std::vector<float>"/>
 <class name="std::vector<double>"/>
 <class name="std::vector<long double>"/>
 <class name="std::vector<long>"/>
 <class name="std::vector<long long>"/>
 <class name="std::vector<unsigned long>"/>
 <class name="std::vector<unsigned long long>"/>
 <class name="std::vector<int>"/>
 <class name="std::vector<unsigned int>"/>
 <class name="std::vector<short>"/>
 <class name="std::vector<unsigned short>"/>
 <class name="std::vector<char>"/>
 <class name="std::vector<unsigned char>"/>
 <class name="std::vector<bool>"/>
 <class name="std::vector<std::pair<std::basic_string<char>,double> >"/>
 <class name="std::list<int>"/>
 <class name="std::deque<int>"/>
 <class name="std::set<int>"/>
 <class name="std::pair<int,int>"/>
 <class name="std::pair<unsigned long,unsigned long>"/>
 <class name="std::pair<unsigned int,unsigned int>"/>
 <class name="std::pair<unsigned short,unsigned short>"/>
 <class name="std::pair<unsigned int,float>"/>
 <class name="std::pair<unsigned int,bool>"/>
 <class name="std::pair<double,double>"/>
 <class name="std::pair<unsigned long long,std::basic_string<char> >"/>
 <class name="std::pair<std::basic_string<char>,double>"/>
 <class name="std::pair<std::basic_string<char>,int>"/>
 <class name="std::pair<std::basic_string<char>,std::vector<std::pair<std::basic_string<char>,double> > >"/>
 <class name="std::multimap<double,double>"/>
 <class name="std::map<unsigned int,bool>"/>
 <class name="std::map<int,int>"/>
 <class name="std::map<unsigned long,unsigned long>"/>
 <class name="std::map<unsigned int,unsigned int>"/>
 <class name="std::map<unsigned short,unsigned short>"/>
 <class name="std::map<unsigned int,float>"/>
 <class name="std::map<unsigned long,std::vector<unsigned long> >"/>
 <class name="std::map<unsigned int,std::vector<unsigned int> >"/>
 <class name="std::map<unsigned short,std::vector<unsigned short> >"/>
 <class name="std::map<unsigned long long,std::basic_string<char> >"/>
 <class name="std::map<std::basic_string<char>,std::vector<std::pair<std::basic_string<char>,double> > >"/>
 <class name="std::map<std::basic_string<char>,int>"/>
 <class name="std::set<std::basic_string<char> >"/>
 <class name="edm::Wrapper<std::basic_string<char> >"/>
 <class name="edm::Wrapper<float>"/>
 <class name="edm::Wrapper<double>"/>
 <class name="edm::Wrapper<long double>"/>
 <class name="edm::Wrapper<long long>"/>
 <class name="edm::Wrapper<unsigned long long>"/>
 <class name="edm::Wrapper<long>"/>
 <class name="edm::Wrapper<unsigned long>"/>
 <class name="edm::Wrapper<int>"/>
 <class name="edm::Wrapper<unsigned int>"/>
 <class name="edm::Wrapper<short>"/>
 <class name="edm::Wrapper<unsigned short>"/>
 <class name="edm::Wrapper<char>"/>
 <class name="edm::Wrapper<unsigned char>"/>
 <class name="edm::Wrapper<bool>"/>
 <class name="edm::Wrapper<std::vector<std::basic_string<char> > >"/>
 <class name="edm::Wrapper<std::vector<float> >"/>
 <class name="edm::Wrapper<std::vector<double> >"/>
 <class name="edm::Wrapper<std::vector<long double> >"/>
 <class name="edm::Wrapper<std::vector<long long> >"/>
 <class name="edm::Wrapper<std::vector<unsigned long long> >"/>
 <class name="edm::Wrapper<std::vector<int> >"/>
 <class name="edm::Wrapper<std::vector<unsigned int> >"/>
 <class name="edm::Wrapper<std::vector<short> >"/>
 <class name="edm::Wrapper<std::vector<unsigned short> >"/>
 <class name="edm::Wrapper<std::vector<char> >"/>
 <class name="edm::Wrapper<std::vector<unsigned char> >"/>
 <class name="edm::Wrapper<std::vector<bool> >"/>
 <class name="edm::Wrapper<std::list<int> >"/>
 <class name="edm::Wrapper<std::deque<int> >"/>
 <class name="edm::Wrapper<std::set<int> >"/>
 <class name="edm::Wrapper<std::pair<unsigned long,unsigned long> >"/>
 <class name="edm::Wrapper<std::pair<unsigned int,unsigned int> >"/>
 <class name="edm::Wrapper<std::pair<unsigned short,unsigned short> >"/>
 <class name="edm::Wrapper<std::map<int,int> >"/>
 <class name="edm::Wrapper<std::map<unsigned long,unsigned long> >"/>
 <class name="edm::Wrapper<std::map<unsigned int,unsigned int> >"/>
 <class name="edm::Wrapper<std::map<unsigned short,unsigned short> >"/>
 <class name="edm::Wrapper<std::map<unsigned int,float> >"/>
 <class name="edm::Wrapper<std::map<unsigned long,std::vector<unsigned long> > >"/>
 <class name="edm::Wrapper<std::map<unsigned int,std::vector<unsigned int> > >"/>
 <class name="edm::Wrapper<std::map<unsigned short,std::vector<unsigned short> > >"/>
 <class name="edm::Wrapper<std::map<unsigned long long,std::basic_string<char> > >"/>
 <class name="edm::EventAux"/>
 <class name="edm::LuminosityBlockAux"/>
 <class name="edm::RunAux"/>
 <class name="edm::ProductRegistry">
   <field name="frozen_" transient="true"/>
 </class>
 <class name="std::map<edm::BranchKey,edm::BranchDescription>"/>
 <class name="std::pair<edm::BranchKey,edm::BranchDescription>"/>
 <class name="edm::BranchKey"/>
 <class name="std::vector<edm::ProductID>"/>
 <class name="edm::ModuleDescription"/>
 <class name="edm::BranchEntryDescription">
   <field name="moduleDescriptionPtr_" transient="true"/>
 </class>
 <class name="edm::BranchDescription">
   <field name="branchName_" transient="true"/>
   <field name="produced_" transient="true"/>
   <field name="present_" transient="true"/>
   <field name="provenancePresent_" transient="true"/>
   <field name="transient_" transient="true"/>
   <field name="moduleDescriptionID_" transient="true"/>
 </class>
 <class name="edm::ParameterSetBlob"/>
 <class name="edm::ProcessConfiguration"/>
 <class name="std::vector<edm::ProcessConfiguration>"/>
 <class name="edm::ProcessHistory">
   <field name="id_" transient="true"/>
 </class>

 <class name="edm::FileFormatVersion"/>

 <class name="edm::Hash<0>"/>
 <class name="std::map<edm::Hash<0>,edm::ModuleDescription>"/>
 <class name="std::pair<edm::Hash<0>,edm::ModuleDescription>"/>
 <class name="edm::Hash<2>"/>
 <class name="std::map<edm::Hash<2>,edm::ProcessHistory>"/>
 <class name="std::pair<edm::Hash<2>,edm::ProcessHistory>"/>
 <class name="edm::Hash<1>"/>
 <class name="std::set<edm::Hash<1> >"/>
 <class name="std::map<edm::Hash<1>,edm::ParameterSetBlob>"/>
 <class name="std::pair<edm::Hash<1>,edm::ParameterSetBlob>"/>
 <class name="edm::Hash<3>"/>
 <class name="std::set<edm::Hash<3> >"/>

 <class name="edm::HLTPathStatus"/>
 <class name="edm::Wrapper<edm::HLTPathStatus>"/>
 <class name="std::vector<edm::HLTPathStatus>"/>
 <class name="edm::Wrapper<std::vector<edm::HLTPathStatus> >"/>
 <class name="edm::HLTGlobalStatus"/>
 <class name="edm::Wrapper<edm::HLTGlobalStatus>"/>
 <class name="edm::TriggerResults"/>
 <class name="edm::Wrapper<edm::TriggerResults>"/>
 <class name="edm::helpers::DoNoPostReadFixup"/>
 <class name="edm::helpers::PostReadFixup">
   <field name="fixed_" transient="true"/>
 </class>
 <class name="std::allocator<char>"/>
 <class name="std::allocator<short>"/>
 <class name="std::allocator<int>"/>
 <class name="std::allocator<double>"/>
 <class name="std::less<int>"/>
 <class name="std::input_iterator_tag"/>
 <class name="std::output_iterator_tag"/>
 <class name="std::forward_iterator_tag"/>
 <class name="std::bidirectional_iterator_tag"/>
 <class name="std::random_access_iterator_tag"/>
 <class pattern="*normal_iterator*"/>
</lcgdict>
